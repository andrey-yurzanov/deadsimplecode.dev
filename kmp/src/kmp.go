package kmp

// Вычисление префикс функции.
// str - список символов для вычисления префикс функции
func Prefix(str []rune) []int {
	prf := make([]int, len(str))

	j := 0
	i := 1
	for i < len(str) {
		// Если символы равны, то переходим к следующим
		// символам для сравнения
		if str[i] == str[j] {
			prf[i] = j + 1
			i++
			j++
		} else {
			// Если символы не равны и j равен 0, то переходим
			// к следующему символу для сравнения
			if j == 0 {
				i++
				// Если символы не равны и j больше 0, то переходим
				// используем полученное значение префикс функции для
				// определения j
			} else {
				j = prf[j-1]
			}
		}
	}

	return prf
}

// Поиск первого вхождения подстроки с использованием
// алгоритма Кнута-Морриса-Пратта.
// str - строка в которой будет происходить поиск
// ptr - искомая подстрока
func Search(str []rune, ptr []rune) int {
	prf := Prefix(ptr)
	size := len(ptr)

	i := 0
	j := 0
	for i < len(str) {
		// Если символы равны, то переходим к сравнению
		// следующих символов
		if str[i] == ptr[j] {
			i++
			j++

			// Если j достиг длины ptr, то подстрока
			// найдена и поиск завершается
			if j == size {
				return i - size
			}
		} else {
			// Если символы не равны и j = 0, переходим к
			// следующему символу текста
			if j == 0 {
				i++
				// Если символы не равны и j > 0, находим новое
				// значение для j используя значение префикс функции
			} else {
				j = prf[j-1]
			}
		}
	}
	return -1
}

// Поиск всех вхождений подстроки с использованием
// алгоритма Кнута-Морриса-Пратта.
// str - строка в которой будет происходить поиск
// ptr - искомая подстрока
func SearchAll(str []rune, ptr []rune) []int {
	prf := Prefix(ptr)
	size := len(ptr)
	res := []int{}

	i := 0
	j := 0
	for i < len(str) {
		// Если символы равны, то переходим к сравнению
		// следующих символов
		if str[i] == ptr[j] {
			i++
			j++

			// Если j достиг длины ptr, то необходимо добавить значение в res
			if j == size {
				res = append(res, i-size)
				j = 0
				i++
			}
		} else {
			// Если символы не равны и j = 0, переходим к
			// следующему символу текста
			if j == 0 {
				i++
				// Если символы не равны и j > 0, находим новое
				// значение для j используя значение префикс функции
			} else {
				j = prf[j-1]
			}
		}
	}
	return res
}
